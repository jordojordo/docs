"use strict";(self.webpackChunkkubewarden_docusaurus=self.webpackChunkkubewarden_docusaurus||[]).push([[4924],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?r.createElement(f,o(o({ref:n},l),{},{components:t})):r.createElement(f,o({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_label:"Configuring policies",title:"Configuring policies",description:"Dependency matrix of Kubewarden.",keywords:["policies","ClusterAdmissionPolicies","AdmissionPolicies","configuration","namespaces"]},o=void 0,s={unversionedId:"operator-manual/policies",id:"operator-manual/policies",title:"Configuring policies",description:"Dependency matrix of Kubewarden.",source:"@site/docs/operator-manual/policies.md",sourceDirName:"operator-manual",slug:"/operator-manual/policies",permalink:"/next/operator-manual/policies",draft:!1,editUrl:"https://github.com/kubewarden/docs/edit/main/docs/operator-manual/policies.md",tags:[],version:"current",lastUpdatedAt:1701461294,formattedLastUpdatedAt:"Dec 1, 2023",frontMatter:{sidebar_label:"Configuring policies",title:"Configuring policies",description:"Dependency matrix of Kubewarden.",keywords:["policies","ClusterAdmissionPolicies","AdmissionPolicies","configuration","namespaces"]},sidebar:"docs",previous:{title:"Using private registries",permalink:"/next/operator-manual/policy-servers/private-registry"},next:{title:"Open Telemetry Quickstart",permalink:"/next/operator-manual/telemetry/opentelemetry/quickstart"}},p={},c=[{value:"Skipping namespaces for a specific policy",id:"skipping-namespaces-for-a-specific-policy",level:2}],l={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"skipping-namespaces-for-a-specific-policy"},"Skipping namespaces for a specific policy"),(0,a.kt)("p",null,"By default, policies apply to all Namespaces that the ",(0,a.kt)("inlineCode",{parentName:"p"},"PolicyServer")," is configured for.\nIf you want a policy to target only specific namespaces, you can deploy several ",(0,a.kt)("inlineCode",{parentName:"p"},"AdmissionPolicies")," in each Namespace."),(0,a.kt)("p",null,"Another option is to configure ",(0,a.kt)("inlineCode",{parentName:"p"},"ClusterAdmissionPolicies")," by setting their\n",(0,a.kt)("inlineCode",{parentName:"p"},"spec.namespaceSelector")," (see ",(0,a.kt)("a",{parentName:"p",href:"./CRDs#clusteradmissionpolicy"},"CRD docs"),"). The\n",(0,a.kt)("inlineCode",{parentName:"p"},"spec.namespaceSelector")," decides whether to run the policy on an object, based\non whether the namespace for that object matches the selector."),(0,a.kt)("p",null,"For example, here is a policy that only targets the ",(0,a.kt)("inlineCode",{parentName:"p"},"kube-system")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"my-namespace")," Namespaces:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psa-enforcer-privileged-namespaces\nspec:\n  module: registry://ghcr.io/kubewarden/policies/psa-label-enforcer:v0.1.1\n  rules:\n    - apiGroups: [""]\n      apiVersions: ["v1"]\n      resources: ["namespaces"]\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: true\n  namespaceSelector:\n    matchExpressions:\n      - key: "kubernetes.io/metadata.name"\n        operator: In\n        values: [kube-system, my-namespace]\n  settings:\n    modes:\n      enforce: "privileged"\n')),(0,a.kt)("p",null,"Here is a policy that targets all the Namespaces besides the ",(0,a.kt)("inlineCode",{parentName:"p"},"kube-system")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"my-namespace"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: psa-enforcer-default-mode\nspec:\n  module: registry://ghcr.io/kubewarden/policies/psa-label-enforcer:v0.1.1\n  rules:\n    - apiGroups: [""]\n      apiVersions: ["v1"]\n      resources: ["namespaces"]\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: true\n  namespaceSelector:\n    matchExpressions:\n      - key: "kubernetes.io/metadata.name"\n        operator: NotIn\n        values: [kube-system, my-namespace]\n  settings:\n    modes:\n      enforce: "restricted"\n')))}m.isMDXComponent=!0}}]);